---
import ArrowRedoRight from "../icons/ArrowRedoRight.astro";

interface ChooseAnswerProps {
  inciso: string;
  exerciseText: string;
  answer: Array<Answer>;
}

interface Answer {
  text: string;
  validation: "correct" | "incorrect";
}

const { inciso, exerciseText, answer } = Astro.props as ChooseAnswerProps;
---

<div class="grid-item">
  <!-- Opciones de respuesta utilizando CSS Grid -->
  <p><strong>{inciso}) <span set:html={exerciseText} /></strong></p>
  <button class="option-btn" data-validation={answer[0].validation}>
    <span set:html={answer[0].text} /></button
  >
  <button class="option-btn" data-validation={answer[1].validation}>
    <span set:html={answer[1].text} />
  </button>
  <button class="option-btn" data-validation={answer[2].validation}>
    <span set:html={answer[2].text} />
  </button>

  <!-- Espacio de retroalimentación -->
  <div id="feedback">
    <h3 class="h3-correct" style="display: none">
      ¡Felicidades! Lo ha conseguido.
    </h3>
    <h3 class="h3-incorrect" style="display: none">
      Lo sentimos. Su selección no es correcta.
    </h3>
  </div>

  <!-- Botón para reiniciar el ejercicio -->
  <button id="retryButton" style="display: none">
    <div>
      <ArrowRedoRight class="svg" />
      <span>Intentarlo de nuevo</span>
    </div>
  </button>
</div>

<script>
  /* Listener-wrap para cuando cargue la pagina*/
  document.addEventListener("astro:page-load", () => {
    // Listener para todos los botones de opciones
    document.querySelectorAll(".option-btn").forEach((button) => {
      button.addEventListener("click", (event) => {
        const target = event.currentTarget as HTMLButtonElement;
        const validation = target.getAttribute("data-validation");

        if (validation) {
          validateAnswer(validation, target);
        }
      });
    });

    // Listener para todos los Botones de Retry
    document.querySelectorAll("#retryButton").forEach((button) => {
      button.addEventListener("click", (event) => {
        const target = event.currentTarget as HTMLButtonElement;
        retry(target);
      });
    });

    // Funcion para validar la respuesta
    function validateAnswer(answer: string, button: HTMLButtonElement) {
      const parent = button.parentElement as HTMLDivElement;
      if (!parent) return;
      const options = parent.querySelectorAll(
        ".option-btn",
      ) as NodeListOf<HTMLButtonElement>;
      const retryButton = parent.querySelector(
        "#retryButton",
      ) as HTMLButtonElement;
      const feedback = parent.querySelector("#feedback") as HTMLDivElement;

      // Deshabilitar todos los botones después de una respuesta
      options.forEach((opt) => (opt.disabled = true));

      if (answer === "correct") {
        button.classList.add("correct");
        const h3 = feedback.querySelector(".h3-correct") as HTMLHeadingElement;
        h3.style.display = "block";
      } else {
        const h3 = feedback.querySelector(
          ".h3-incorrect",
        ) as HTMLHeadingElement;
        h3.style.display = "block";
        button.classList.add("incorrect");
        retryButton.style.display = "block"; // Muestra el botón de "Intentar de nuevo"
      }
    }
  });

  //Funcion para reintentar el ejercicio
  function retry(button: HTMLButtonElement) {
    const parent = button.parentElement as HTMLDivElement;
    if (!parent) return;
    const feedback = parent.querySelector("#feedback") as HTMLDivElement;
    // Limpia el espacio de retroalimentación
    feedback.querySelectorAll("h3").forEach((h3) => {
      h3.style.display = "none";
    });
    const retryButton = parent.querySelector(
      "#retryButton",
    ) as HTMLButtonElement;
    const options = parent.querySelectorAll(
      ".option-btn",
    ) as NodeListOf<HTMLButtonElement>;
    retryButton.style.display = "none"; // Oculta el botón de "Intentar de nuevo"
    options.forEach((opt) => {
      opt.disabled = false; // Habilita los botones
      opt.classList.remove("correct", "incorrect"); // Remueve las clases de estilo
    });
  }
</script>

<style>
  .grid-item {
    background-color: #f9f9f9;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    text-align: left;
  }

  .option-btn {
    background-color: #f0f0f0;
    border: 2px solid #ccc;
    padding: 10px 15px;
    font-size: 1rem;
    cursor: pointer;
    margin-top: 10px;
    width: 100%;
    transition:
      background-color 0.3s ease,
      transform 0.3s ease;
  }

  .option-btn:hover {
    background-color: #e7e7e7;
    transform: scale(1.05);
  }

  .h3-correct {
    color: #5cb85c;
    margin-top: 1rem;
  }

  .h3-incorrect {
    color: #d9534f;
    margin-top: 1rem;
  }

  .correct {
    background-color: #5cb85c;
    color: white;
    border-color: #4cae4c;
  }

  .incorrect {
    background-color: #d9534f;
    color: white;
    border-color: #d43f3a;
  }

  #retryButton {
    display: flex;
    max-width: fit-content;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 18px;
    background-color: var(--primary-color-dark-2);
    color: var(--white-color);
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  #retryButton > div {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  #retryButton:hover {
    background-color: var(--primary-color);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .correct,
  .incorrect {
    animation: fadeIn 0.5s ease;
  }
</style>
