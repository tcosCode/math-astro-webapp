---
// YouTubePlayer.astro
export interface Props {
  videoId: string;
}

const { videoId } = Astro.props;
const playerContainerId = `Youtuber-container-${videoId}`;
---

<div id={playerContainerId} class="youtube-iframe-container"></div>

<style>
  .youtube-iframe-container {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .youtube-iframe-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
  }
</style>

<script define:vars={{ videoId, playerContainerId }}>
  const playerGlobalObjectName = `youtubePlayer_${playerContainerId}`;
  let ytPlayerInstance = null;
  let isPlayerReady = false;

  function loadYouTubeAPI() {
    return new Promise((resolve) => {
      if (window.YT && window.YT.Player) {
        console.log("‚úÖ YouTube API already loaded.");
        resolve();
        return;
      }

      if (!window.YT) {
        const tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";

        window.onYouTubeIframeAPIReady = () => {
          console.log("‚úÖ YouTube API loaded successfully.");
          resolve();
        };
        document.body.appendChild(tag);
      } else {
        resolve();
      }
    });
  }

  async function createPlayer() {
    const container = document.getElementById(playerContainerId);
    if (!container) {
      console.error("‚ùå Player container not found during player creation.");
      return;
    }

    await loadYouTubeAPI();

    console.log("üé• Initializing YouTube Player...");
    ytPlayerInstance = new YT.Player(playerContainerId, {
      height: "100%",
      width: "100%",
      videoId,
      playerVars: {
        playsinline: 1,
        enablejsapi: 1,
      },
      events: {
        onReady: () => {
          isPlayerReady = true;
          console.log("‚úÖ Player is ready.");
          exposePlayerAPI();
        },
        onError: (error) => {
          isPlayerReady = false;
          console.error("‚ùå Player error:", error);
        },
      },
    });
  }

  async function ensurePlayerReady() {
    const container = document.getElementById(playerContainerId);
    if (!container) {
      console.warn("‚ö†Ô∏è Player container not found during validation.");
      return;
    }

    if (ytPlayerInstance && isPlayerReady) {
      console.log("‚úÖ Player already initialized and ready.");
      return;
    }

    if (ytPlayerInstance) {
      console.log("‚ôªÔ∏è Destroying existing player instance.");
      ytPlayerInstance.destroy();
    }

    await createPlayer();
  }

  function exposePlayerAPI() {
    if (!ytPlayerInstance) return;

    window[playerGlobalObjectName] = {
      seekTo: (seconds) => {
        if (!isPlayerReady) {
          console.warn("‚ö†Ô∏è Player not ready for seek.");
          return;
        }
        ytPlayerInstance.seekTo(seconds, true);
        console.log(`‚è© Seeked to ${seconds} seconds.`);
      },
      getPlayerState: () => {
        if (!isPlayerReady) {
          console.warn("‚ö†Ô∏è Player not ready for state check.");
          return null;
        }
        return ytPlayerInstance.getPlayerState();
      },
    };
  }

  function initializePlayer() {
    console.log("üöÄ Initializing player setup...");
    ensurePlayerReady();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializePlayer);
  } else {
    initializePlayer();
  }

  document.addEventListener("astro:page-load", initializePlayer);
</script>
