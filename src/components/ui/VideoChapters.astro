---
import type { VideoChapter } from "@types";
import List from "@assets/icons/list.svg";

interface Props {
  chapters: VideoChapter[];
  videoId: string;
}

const { chapters, videoId } = Astro.props;
// Cambiar para coincidir con el nombre usado en YouTubePlayer.astro
const playerGlobalObjectName = `youtubePlayer_Youtuber-container-${videoId}`;
---

{
  chapters.length > 0 && (
    <div class="video-chapters">
      <div class="title-chapters">
        <List class="svg-stroke video-chapters-icon" />
        <h3>Contenido del video</h3>
      </div>
      <ul>
        {chapters.map((chapter) => (
          <li class="time-chapter">
            <a
              href="#"
              data-time={chapter.time}
              class="chapter-link"
              onclick={`handleChapterClick(event, '${chapter.time}', '${playerGlobalObjectName}')`}
            >
              {chapter.time} - {chapter.title}
            </a>
          </li>
        ))}
      </ul>
    </div>
  )
}

<script is:inline>
  // This script is inlined and runs globally
  function parseTimestampToSeconds(timestamp) {
    const parts = timestamp.split(":").map(Number);
    let seconds = 0;
    if (parts.length === 3) {
      // HH:MM:SS
      seconds = parts[0] * 3600 + parts[1] * 60 + parts[2];
    } else if (parts.length === 2) {
      // MM:SS
      seconds = parts[0] * 60 + parts[1];
    } else if (parts.length === 1) {
      // SS
      seconds = parts[0];
    }
    return seconds;
  }

  function handleChapterClick(event, timeString, playerObjectName) {
    event.preventDefault();
    const seconds = parseTimestampToSeconds(timeString);

    console.log("Intentando buscar player:", playerObjectName);
    console.log("Tiempo a buscar:", seconds, "seconds");

    // Función para intentar hacer seek
    function attemptSeek() {
      if (
        window[playerObjectName] &&
        typeof window[playerObjectName].seekTo === "function"
      ) {
        console.log("Player encontrado, haciendo seek...");
        window[playerObjectName].seekTo(seconds);
        return true;
      }
      return false;
    }

    // Intentar inmediatamente
    if (attemptSeek()) {
      return;
    }

    // Si no funciona, esperar un poco y reintentar (el player puede estar inicializándose)
    console.log("Player no disponible inmediatamente, esperando...");

    let attempts = 0;
    const maxAttempts = 10;
    const retryInterval = 500; // 500ms

    const retrySeek = setInterval(() => {
      attempts++;
      console.log(`Intento ${attempts}/${maxAttempts} de encontrar player...`);

      if (attemptSeek()) {
        clearInterval(retrySeek);
        console.log("Player encontrado después de esperar");
        return;
      }

      if (attempts >= maxAttempts) {
        clearInterval(retrySeek);
        console.warn(
          `No se pudo encontrar el player después de ${maxAttempts} intentos`,
        );

        // Como último recurso, buscar cualquier player disponible
        const availablePlayers = Object.keys(window).filter(
          (key) =>
            key.startsWith("youtubePlayer") &&
            window[key] &&
            typeof window[key].seekTo === "function",
        );

        console.log("Players disponibles:", availablePlayers);

        if (availablePlayers.length > 0) {
          console.log("Usando player alternativo:", availablePlayers[0]);
          window[availablePlayers[0]].seekTo(seconds);
        } else {
          console.error("No se encontró ningún player funcional");
          alert(
            "Error: El reproductor no está listo. Por favor, espera un momento e intenta de nuevo.",
          );
        }
      }
    }, retryInterval);
  }

  // Función global para debug - puedes llamarla desde la consola
  window.debugYoutubePlayers = function () {
    const players = Object.keys(window).filter((key) =>
      key.startsWith("youtubePlayer"),
    );
    console.log("Todos los players de YouTube encontrados:", players);
    players.forEach((playerName) => {
      console.log(`${playerName}:`, window[playerName]);
    });
  };
</script>

<style>
  .video-chapters {
    border-radius: 0.75rem;
    background-color: hsl(0 0% 100%);
    border: 1px solid var(--light-grey-2);
    overflow: hidden;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
    /*position: sticky;*/
  }

  .title-chapters {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    border: 1px solid var(--light-grey-2);
  }

  .video-data-icon {
    margin-right: 0.25rem;
    width: 16px;
  }

  .chapter-link {
    display: flex;
    padding: 1rem;
    cursor: pointer;
    border-bottom: 1px solid var(--light-grey-2);
    transition: all 0.3s ease;
  }

  .time-chapter:hover {
    background-color: var(--light-grey);
  }
</style>
