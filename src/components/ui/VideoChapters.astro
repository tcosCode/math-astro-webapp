---
import type { VideoChapter } from "@types";
import List from "@assets/icons/list.svg";

interface Props {
  chapters: VideoChapter[];
  videoId: string; // Necesitamos el videoId para construir el nombre global correcto
}

const { chapters, videoId } = Astro.props;
// 1. Cambiar el nombre global para que coincida con el que se define en [video].astro
const playerGlobalObjectName = `PlayerInstance_${videoId}`;
---

{
  chapters.length > 0 && (
    <div class="video-chapters">
      <div class="title-chapters">
        <List class="svg-stroke video-chapters-icon" />
        <h3>Contenido del video</h3>
      </div>
      <ul>
        {chapters.map((chapter) => (
          <li class="time-chapter">
            <a
              href="#"
              data-time={chapter.time}
              class="chapter-link"
              onclick={`handleChapterClick(event, '${chapter.time}', '${playerGlobalObjectName}')`}
            >
              <p class="chapter-text">{chapter.time}</p>
              <p>{chapter.title}</p>
            </a>
          </li>
        ))}
      </ul>
    </div>
  )
}

<script is:inline>
  async function handleChapterClick(event, time, playerGlobalName) {
    event.preventDefault();

    // 1) Calcula el tiempo en segundos
    const [mins, secs] = time.split(":").map(Number);
    const seconds = mins * 60 + secs;

    // 2) Recupera la instancia de Plyr
    const player = window[playerGlobalName];
    if (!player) {
      console.error(`No encontré Plyr en ${playerGlobalName}`);
      return;
    }

    // 3) Asegúrate de que el player esté listo
    if (!player.ready) {
      await new Promise((resolve) => player.on("ready", resolve));
    }

    // 4) Haz el seek con currentTime y luego play()
    player.currentTime = seconds;
    player
      .play()
      .catch((err) => console.error("Error arrancando play():", err));
  }
</script>

<style>
  .video-chapters {
    border-radius: 0.75rem;
    background-color: hsl(0 0% 100%);
    border: 1px solid var(--light-grey-2);
    overflow: hidden;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 6rem;
  }

  @media (max-width: 768px) {
    .video-chapters {
      position: auto;
      top: auto;
    }
  }

  .title-chapters {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    border: 1px solid var(--light-grey-2);
  }

  .video-chapters-icon {
    margin-right: 0.25rem;
    width: 18px;
    color: var(--primary-color);
  }

  .chapter-link {
    display: flex;
    gap: 1rem;
    align-items: center;
    padding: 1rem;
    cursor: pointer;
    border-bottom: 1px solid var(--light-grey-2);
    transition: all 0.3s ease;
    text-decoration: none;
    color: var(--dark-grey);
    opacity: 0.9;
    font-size: 0.875rem;
  }

  .chapter-text {
    padding: 0.2rem 0.5rem;
    background-color: var(--light-grey-2);
    border-radius: 5px;
  }

  .chapter-link:hover {
    background-color: var(--light-grey);
    text-decoration: none;
  }

  /* Estilos para los mensajes de estado */
  .chapter-message {
    animation: slideIn 0.3s ease;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>
