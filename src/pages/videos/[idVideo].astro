---
import "plyr/dist/plyr.css";

import Layout from "@layouts/Layout.astro";
import VideoChapters from "@components/ui/VideoChapters.astro"; // No cambia la importación

import Book from "@assets/icons/ex-figure-book.svg";
import YoutubeIcon from "@assets/icons/youtube.svg";

import type { VideoParams, YouTubeVideo, VideoChapter } from "@types";

import { getVideoById } from "@src/utils/helpers/youtubeService"; // Asumimos que aún quieres datos de YT
import { parseDuration } from "@src/utils/helpers/parseVideoYtTime";
import { findVideoById } from "@src/utils/helpers/findVideo";
import { extractChaptersFromDescription } from "@src/utils/helpers/youtubeChapters";

const { idVideo } = Astro.params as unknown as VideoParams;

// Obtener datos del video (esto puede seguir igual si necesitas info de la API de YT)
const videoYtData = (await getVideoById(idVideo)) as YouTubeVideo;
const videoLocalData = findVideoById(idVideo);

if (!videoYtData || !videoLocalData) {
  return Astro.redirect("/404");
}

const formattedDuration = parseDuration(videoYtData.contentDetails.duration);
const chapters: VideoChapter[] = extractChaptersFromDescription(
  videoYtData.snippet.description,
);

const playerGlobalObjectName = `PlayerInstance_${idVideo}`; // Mismo nombre que en VideoChapters
---

<Layout title={`Videos de la clase ${videoLocalData.title}`}>
  <section class="video-detail-page">
    <article class="video-page-data">
      <div class="video-container">
        <!-- Reproductor de YouTube -->
        <div class="plyr__video-embed" id="player" data-video-id={idVideo}>
          <iframe
            src={`https://www.youtube.com/embed/${idVideo}?autoplay=0&mute=1`}
            allowfullscreen></iframe>
        </div>
      </div>

      <div class="video-info">
        <h2 class="video-title">
          {videoLocalData.title}
        </h2>
        <div class="video-data">
          <Book class="svg-stroke video-data-icon" />
          {videoLocalData.grade}
          <YoutubeIcon class="svg-stroke video-data-icon" />
          <span>{formattedDuration}</span>
        </div>
        <div class="description">
          <h3>Descripción:</h3>
          <p>{videoLocalData.description}</p>
        </div>
      </div>
    </article>

    <article class="video-chapters-playlist">
      <VideoChapters chapters={chapters} videoId={videoYtData.id} />
    </article>
  </section>
</Layout>

<script>
  import Plyr from "plyr";

  let player: any;

  function initializePlayer() {
    // Desmonta el reproductor existente si ya está inicializado
    if (player) {
      player.destroy();
    }
    // Inicializa un nuevo reproductor
    player = new Plyr("#player");

    const playerEl = document.getElementById("player");
    // ¡Aquí está nuestro idVideo!
    const idVideo = playerEl?.dataset.videoId;
    if (!idVideo) {
      console.error("No encontré data-video-id en #player");
      return;
    }

    // Registra el reproductor como una variable global
    (window as any)[`PlayerInstance_${idVideo}`] = player;

    // Opcional: esperar al evento ready
    player.on("ready", () => {
      console.log(`PlayerInstance_${idVideo} listo`);
    });
  }

  // Asegúrate de que el reproductor se inicialice al cargar la página
  document.addEventListener("astro:after-swap", () => {
    initializePlayer();
  });

  // También lo inicializamos en la primera carga
  initializePlayer();
</script>

<style>
  .video-detail-page {
    display: flex;
    gap: 2rem;
    margin-block: 3.5rem 3rem;
    justify-content: space-between;
  }

  @media (max-width: 768px) {
    .video-detail-page {
      flex-direction: column;
      gap: 1rem;
      margin-block: 3rem;
    }
  }

  .video-container {
    width: 100%;
    max-width: 800px;
    aspect-ratio: 16 / 9;
    border-radius: 10px;
    background-color: hsl(var(--light-grey));
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    border: 3px solid hsl(var(--dark-grey));
    overflow: hidden;
  }

  .video-info {
    max-width: 800px;
    margin-top: 2rem;
    padding: 0 1rem;
    color: hsl(var(--dark-grey));
  }

  .video-title {
    font-size: 1.5rem;
  }

  .video-data {
    display: flex;
    align-items: center;
    margin-block: 0.75rem;
    font-size: 0.875rem;
    line-height: 2;
  }

  .video-data-icon {
    margin-right: 0.25rem;
    margin-left: 1rem;
    width: 16px;
  }

  .description {
    margin-block: 2rem;
    padding: 1.5rem;
    border: 1px solid hsl(var(--light-grey-2));
    border-radius: 10px;
    background-color: white;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
  }

  .description p {
    color: rgb(75 85 99);
  }

  .video-info h3 {
    font-size: 1.125rem;
    margin-bottom: 0.5rem;
  }

  .video-info p {
    font-size: 1rem;
    line-height: 1.5;
  }
</style>
