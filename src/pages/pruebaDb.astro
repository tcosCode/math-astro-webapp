---
import Layout from "@layouts/Layout.astro";

// Import the database repository function
import { getAllAnswers } from "@repositories/answersRepo";

// Access locals to get the authenticated user provided by Clerk middleware
const user = await Astro.locals.currentUser(); // Make sure your Clerk middleware exposes currentUser on locals

// Fetch data from the database directly in the server-side script
// Only fetch if the user is logged in
let userAnswers: any[] = [];
if (user) {
  try {
    // Assuming your getAllAnswers function takes the user ID
    const response = await getAllAnswers(user.id);
    // Assuming getAllAnswers returns an array of answers directly
    userAnswers = response;
  } catch (error) {
    console.error("Error fetching user answers in Astro component:", error);
    // Handle error: maybe set userAnswers to an empty array or show an error message
    userAnswers = [];
  }
}

// Get the user's name or ID for display
const userName = user ? user.firstName || user.lastName || user.id : "Guest";
---

<Layout title="API Test Page">
  <main>
    <h1>Test API Routes (using answers.json)</h1>

    <h2>GET /api/answers.json (Manual Test)</h2>
    <button id="getAnswers">Fetch Answers (Manual Test)</button>
    <pre id="getOutput"></pre>

    <hr />

    <h2>POST /api/answers.json (Submit Exercise Answer)</h2>
    <div>
      <label for="postGradeInput">Grade:</label>
      <input type="text" id="postGradeInput" placeholder="e.g., 7mo" />
    </div>
    <div>
      <label for="postExerciseIdInput">Exercise ID:</label>
      <input type="number" id="postExerciseIdInput" placeholder="e.g., 123" />
    </div>
    <div>
      <label for="postSectionIdInput">Section ID:</label>
      <input type="text" id="postSectionIdInput" placeholder="e.g., a, b, c" />
    </div>
    <div>
      <label for="postCorrectInput">Correct:</label>
      <input type="checkbox" id="postCorrectInput" />
    </div>
    <button id="postAnswer">Submit Answer Data</button>
    <pre id="postOutput"></pre>

    <hr />

    {/* New Section: Data Loaded Server-Side */}
    <section>
      <h2>Data Loaded During Server Render</h2>
      {
        user ? (
          <>
            <p>Hello, {userName}! Here are your answers from the database:</p>
            {userAnswers.length > 0 ? (
              <ul>
                {userAnswers.map((answer) => (
                  <li>
                    Answer ID: {answer.id}, Grade: {answer.grade}, Exercise ID:{" "}
                    {answer.exerciseId}, Correct:{" "}
                    {answer.correct ? "Yes" : "No"}, Submitted At:{" "}
                    {new Date(answer.createdAt).toLocaleString()}
                  </li>
                ))}
              </ul>
            ) : (
              <p>No answers found for this user in the database.</p>
            )}
          </>
        ) : (
          <p>Please log in to see your answers loaded server-side.</p>
        )
      }
    </section>

    <hr />
    {/* Optional separator */}

    {
      /* Keep the existing Load Data from DB Section if you still want it for client-side fetch testing */
    }
    <h2>Data from Database (Client-Side Fetch Test)</h2>
    <p>
      This section fetches all stored answers from the database using a
      client-side GET request after the page loads.
    </p>
    <button id="loadDbData">Load All Answers from DB</button>
    <pre id="dbDataOutput"></pre>
  </main>

  <script is:inline type="module">
    // --- Keep all your existing client-side JavaScript here ---
    // (GET Manual Test, POST Submit, Load Data from DB Client-Side)

    import { getAnswers } from "./src/utils/api";

    // --- GET Section (Manual Test) ---
    const getButton = document.getElementById("getAnswers");
    const getOutput = document.getElementById("getOutput");

    getButton.addEventListener("click", async () => {
      getOutput.textContent = "Fetching...";
      try {
        const response = await fetch("/api/answers.json", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          const errorText = await response.text();
          getOutput.textContent = `Error ${response.status}: ${errorText}`;
          console.error("API Error:", response.status, errorText);
          return;
        }
        const data = await response.json();
        // The API returns { answers: [...] }, so access data.answers
        getOutput.textContent = JSON.stringify(data.answers, null, 2);
      } catch (error) {
        getOutput.textContent = `Error: ${error.message}`;
        console.error("Error fetching answers:", error);
      }
    });

    // --- POST Section ---
    const postButton = document.getElementById("postAnswer");
    const postGradeInput = document.getElementById("postGradeInput");
    const postExerciseIdInput = document.getElementById("postExerciseIdInput");
    const postSectionIdInput = document.getElementById("postSectionIdInput");
    const postCorrectInput = document.getElementById("postCorrectInput");
    const postOutput = document.getElementById("postOutput");

    postButton.addEventListener("click", async () => {
      const grade = postGradeInput.value.trim();
      const exerciseId = parseInt(postExerciseIdInput.value.trim(), 10);
      const sectionId = postSectionIdInput.value.trim();
      const correct = postCorrectInput.checked;

      if (!grade || isNaN(exerciseId)) {
        postOutput.textContent = "Please enter valid Grade and Exercise ID.";
        return;
      }

      const submissionData = {
        grade: grade,
        exerciseId: exerciseId,
        sectionId: sectionId,
        correct: correct,
      };

      postOutput.textContent = "Submitting...";
      try {
        const response = await fetch("/api/answers.json", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(submissionData),
        });

        if (response.status === 400) {
          const errorData = await response.json();
          postOutput.textContent = `Client Error: ${JSON.stringify(errorData, null, 2)}`;
          console.error("API Client Error:", errorData);
          return;
        }

        if (!response.ok) {
          const errorText = await response.text();
          postOutput.textContent = `Error ${response.status}: ${errorText}`;
          console.error("API Error:", response.status, errorText);
          return;
        }

        const data = await response.json();
        postOutput.textContent = JSON.stringify(data, null, 2);

        if (response.ok) {
          postGradeInput.value = "";
          postExerciseIdInput.value = "";
          postSectionIdInput.value = "";
          postCorrectInput.checked = false;
        }
      } catch (error) {
        postOutput.textContent = `Error: ${error.message}`;
        console.error("Error posting answers:", error);
      }
    });

    // --- Load Data from DB Section (Client-Side Fetch Test) ---
    const loadDbDataButton = document.getElementById("loadDbData");
    const dbDataOutput = document.getElementById("dbDataOutput");

    loadDbDataButton.addEventListener("click", async () => {
      dbDataOutput.textContent = "Loading data from DB...";
      try {
        // --- Use the getAnswers utility function ---
        const result = await getAnswers();

        // Check the result from the utility function
        if (result.ok === false) {
          // If the utility returned a structured error { ok: false, error: ... }
          dbDataOutput.textContent = `Error loading data: ${JSON.stringify(result, null, 2)}`;
          console.error("API Utility Error loading DB data:", result.error);
          return;
        }

        // If the result is not an error, it should be the success response { answers: [...] }
        // Display the loaded data (the 'answers' array)
        dbDataOutput.textContent = JSON.stringify(result.answers, null, 2);
        console.log("Data loaded successfully:", result.answers);
      } catch (error) {
        // Catch errors thrown by getAnswers utility (fetch errors, non-structured API errors)
        dbDataOutput.textContent = `Error: ${error.message}`;
        console.error("Error loading data from DB:", error);
      }
    });
  </script>

  <style>
    /* Keep your existing styles */
    main {
      padding: 1rem;
      margin: auto;
      width: 800px;
      max-width: calc(100% - 2rem);
      color: white; /* Adjust color as needed */
      font-size: 20px; /* Adjust font size as needed */
      line-height: 1.6;
    }
    h1 {
      font-size: 2.5rem;
      font-weight: 700;
      line-height: 1;
      margin-bottom: 1rem;
      text-align: center; /* Example style */
      color: var(--dark-grey); /* Example color variable */
    }
    h2 {
      font-size: 1.8rem; /* Adjust size */
      margin-top: 1.5rem; /* Adjust spacing */
      margin-bottom: 0.8rem;
      color: var(--dark-grey); /* Example color variable */
    }
    section h2 {
      /* Style for the new section's heading */
      margin-top: 2rem; /* Add space above the new section */
    }
    hr {
      margin: 2rem 0;
      border: 0;
      border-top: 1px solid #ccc; /* Adjust color */
    }
    div {
      /* Style for input containers */
      margin-bottom: 0.8rem;
    }
    label {
      display: inline-block; /* Or block if you prefer */
      margin-right: 0.5rem;
      color: var(--dark-grey); /* Example color */
      font-weight: bold;
    }
    input[type="text"],
    input[type="number"] {
      padding: 0.5rem;
      margin-right: 1rem;
      border: 1px solid #ccc; /* Adjust style */
      border-radius: 4px;
    }
    input[type="checkbox"] {
      margin-right: 0.5rem;
      vertical-align: middle; /* Align with text */
      width: 1.2em; /* Adjust size */
      height: 1.2em; /* Adjust size */
    }
    button {
      margin-top: 1rem; /* Adjust spacing */
      margin-right: 1rem;
      padding: 0.5rem 1rem;
      cursor: pointer;
      background-color: #007bff; /* Example color */
      color: white;
      border: none;
      border-radius: 4px;
    }
    button:hover {
      background-color: #0056b3; /* Example hover color */
    }
    pre {
      background-color: #f4f4f4; /* Adjust color */
      color: #333; /* Adjust color */
      padding: 1rem;
      border-radius: 4px;
      overflow-x: auto;
      white-space: pre-wrap; /* Wrap long lines */
      word-wrap: break-word;
      margin-top: 1rem; /* Adjust spacing */
    }
    /* Styles for the new server-loaded data section */
    section p {
      color: var(--dark-grey);
      margin-bottom: 0.8rem;
    }
    section ul {
      list-style: disc inside; /* Example list style */
      padding-left: 1rem;
      color: var(--dark-grey);
    }
    section li {
      margin-bottom: 0.5rem;
      border-bottom: 1px dashed #ccc; /* Example separator */
      padding-bottom: 0.5rem;
    }
  </style></Layout
>
