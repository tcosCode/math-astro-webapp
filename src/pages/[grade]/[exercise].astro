---
import Layout from "@layouts/Layout.astro";
import { topics } from "@data/topics";
import ChooseAnswer from "@components/exercisesComponents/ChooseAnswer.astro";
import TrueFalse from "@components/exercisesComponents/TrueFalse.astro";
import Pencil from "@components/icons/Pencil.astro";
import Problem from "@components/exercisesComponents/Problem.astro";
import Matching from "@components/exercisesComponents/Matching.astro";
import FillBlanks from "@components/exercisesComponents/FillBlank.astro";
import { shuffle } from "@utils/shuffleArray";

interface ExerciseChooseAnswer {
  id: string;
  type: string;
  title: string;
  img?: string;
  texto: string;
  incisos?: Array<{
    id: string;
    exercise: string;
    answer: Array<Answer>;
  }>;
}

interface Answer {
  text: string;
  validation: "correct" | "incorrect";
}

interface ExerciseTrueFalse {
  id: string;
  type: string;
  title: string;
  img?: string;
  texto: string;
  incisos?: Array<{
    id: string;
    exercise: string;
    validation: "correct" | "incorrect";
  }>;
}

interface ExerciseProblem {
  id: string;
  type: string;
  title: string;
  img?: string;
  texto: string;
  incisos?: Array<{
    id: string;
    exercise: string;
    answer: string;
  }>;
}

interface ExerciseMatching {
  id: string;
  type: string;
  img?: string;
  title: string;
  texto: string;
  incisos?: Array<{
    text: string;
    pairId: number;
  }>;
}

interface ExerciseFillBlank {
  id: string;
  type: string;
  title: string;
  img?: string;
  texto: string;
  incisos: Array<{
    id: string;
    sentence: Array<string>;
    options: Array<{
      id: string;
      text: string;
      position: string;
    }>;
  }>;
}

type Exercise =
  | ExerciseChooseAnswer
  | ExerciseTrueFalse
  | ExerciseProblem
  | ExerciseMatching
  | ExerciseFillBlank;

// Define la función getStaticPaths
export function getStaticPaths() {
  const paths: Array<{ params: { grade: string; exercise: string } }> = [];

  // Genera rutas dinámicas basadas en los datos disponibles
  const grades: string[] = ["7mo", "8vo", "9no", "10mo", "11no", "12mo"];
  grades.forEach((grade) => {
    topics.forEach((topic) => {
      if (topic.title === grade) {
        topic.exercises.forEach((exercise) => {
          paths.push({ params: { grade, exercise: exercise.id } });
        });
      }
    });
  });

  return paths;
}

const { grade, exercise } = Astro.params || {};

if (!grade || !exercise) {
  throw new Error("Los parámetros de la ruta son inválidos o no existen.");
}

// Busca el ejercicio actual
const currentExercise = topics
  .find((topic) => topic.title === grade)
  ?.exercises.find((ex) => ex.id === exercise) as Exercise | undefined;

if (!currentExercise) {
  Astro.redirect("/404");
}

let shuffledIncisos: Array<{ text: string; pairId: number }> = [];
if (currentExercise?.type === "Matching") {
  shuffledIncisos = currentExercise?.incisos
    ? (shuffle(currentExercise.incisos) as { text: string; pairId: number }[])
    : [];
}
const length = currentExercise?.incisos?.length ?? 0;
---

<Layout title={`Grado ${grade} | Ejercicio ${exercise}`}>
  <section class="exercises">
    <h2 class="h2-exercises">
      <Pencil class="svg" />
      <span>{grade} Grado | Ejercicio No. {exercise}</span>
    </h2>
    <p set:html={currentExercise?.texto} />
    {
      currentExercise?.img && (
        <img
          class="img-exercises"
          src={`/img/exercises/${grade}-${exercise}.webp`}
          alt="Imagen del ejercicio"
        />
      )
    }
    <p class="p-exercises-video">
      Si tienes alguna duda, mira la clase <span class="span-exercises-video">
        <a href={`/videos/${currentExercise?.title}`}
          >{currentExercise?.title}</a
        ></span
      >
    </p>

    <!-- Sección de ejercicios -->
    <div class="grid-container">
      {
        currentExercise?.type === "ChooseAnswer" &&
          currentExercise?.incisos
            ?.filter(
              (
                inciso,
              ): inciso is { id: string; exercise: string; answer: Answer[] } =>
                "answer" in inciso,
            )
            .map((inciso) => {
              return (
                <ChooseAnswer
                  inciso={inciso["id"]}
                  exerciseText={inciso["exercise"]}
                  answer={inciso["answer"]}
                />
              );
            })
      }

      {
        currentExercise?.type === "TrueFalse" &&
          currentExercise?.incisos?.map((inciso) => {
            if (!inciso) return null;
            return (
              <TrueFalse
                inciso={"id" in inciso ? inciso.id : ""}
                exerciseText={"exercise" in inciso ? inciso.exercise : ""}
                validation={"validation" in inciso ? inciso.validation : ""}
              />
            );
          })
      }

      {
        currentExercise?.type === "Problem" &&
          currentExercise?.incisos?.map((inciso) => {
            if (!inciso) return null;
            return (
              <Problem
                inciso={"id" in inciso ? inciso.id : ""}
                exerciseText={"exercise" in inciso ? inciso.exercise : ""}
                answer={"answer" in inciso ? inciso.answer : ""}
              />
            );
          })
      }

      {
        currentExercise?.type === "Matching" &&
          shuffledIncisos?.map((inciso) => {
            if (!inciso) return null;
            return "text" in inciso ? (
              <Matching
                text={inciso.text}
                pairId={inciso.pairId}
                length={length}
              />
            ) : null;
          })
      }

      {
        currentExercise?.type === "FillBlank" &&
          currentExercise.incisos?.map((inciso) => {
            return (
              <FillBlanks
                inciso={"id" in inciso ? inciso.id : ""}
                sentence={"sentence" in inciso ? inciso.sentence : []}
                options={"options" in inciso ? inciso.options : []}
              />
            );
          })
      }

      {currentExercise?.type === "" && "Ejercicio por añadir"}
    </div>
  </section>
</Layout>

<style>
  .exercises {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-block: 4rem;
  }
  .h2-exercises {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 1.5rem;
    color: var(--dark-grey);
  }

  .img-exercises {
    width: 350px;
    height: auto;
    margin-block: 1rem;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    background-color: var(--secondary-color-light-3);
    padding: 0.4rem;
  }

  @media (max-width: 768px) {
    .img-exercises {
      width: 70%;
      margin-inline: auto;
    }
  }

  .p-exercises-video {
    color: var(--secondary-color-light-3);
    text-align: center;
    font-size: 0.75rem;
    font-weight: 700;
    margin-top: 1rem;
    margin-left: 10%;
    padding: 0.3rem;
    background-color: var(--secondary-color-dark);
    border-radius: 0 0 0 25px;
  }

  .span-exercises-video {
    color: var(--secondary-color-dark);
    text-transform: uppercase;
    cursor: pointer;
    transition: color 0.3s ease;
    padding: 0.3rem 1rem;
    background-color: white;
  }

  .span-exercises-video:hover {
    color: black;
  }

  @media (max-width: 600px) {
    .p-exercises-video {
      width: 100%;
      margin-left: 0;
      border-radius: 0;
    }

    .span-exercises-video {
      display: block;
      width: fit-content;
      margin-inline: auto;
      margin-top: 0.3rem;
      border-radius: 5px;
    }
  }

  p {
    font-size: 1.1rem;
    color: var(--dark-grey);
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(2, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  @media (max-width: 768px) {
    .grid-container {
      grid-template-columns: 1fr;
    }
  }
</style>
