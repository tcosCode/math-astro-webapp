---
import Layout from "@layouts/Layout.astro";
import { topics } from "@data/topics";
import ChooseAnswer from "@components/exercisesComponents/ChooseAnswer.astro";
import TrueFalse from "@components/exercisesComponents/TrueFalse.astro";
import Pencil from "@components/icons/Pencil.astro";
import Problem from "@src/components/exercisesComponents/Problem.astro";
import Matching from "@src/components/exercisesComponents/Matching.astro";
import { shuffle } from "@utils/shuffleArray";

interface ExerciseChooseAnswer {
  id: string;
  type: string;
  title: string;
  texto: string;
  incisos?: Array<{
    id: string;
    exercise: string;
    answer: Array<Answer>;
  }>;
}

interface Answer {
  text: string;
  validation: "correct" | "incorrect";
}

interface ExerciseTrueFalse {
  id: string;
  type: string;
  title: string;
  texto: string;
  incisos?: Array<{
    id: string;
    exercise: string;
    validation: string;
  }>;
}

interface ExerciseProblem {
  id: string;
  type: string;
  title: string;
  texto: string;
  incisos?: Array<{
    id: string;
    exercise: string;
    answer: string;
  }>;
}

interface ExerciseMatching {
  id: string;
  type: string;
  title: string;
  texto: string;
  incisos?: Array<{
    text: string;
    pairId: number;
  }>;
}

type Exercise =
  | ExerciseChooseAnswer
  | ExerciseTrueFalse
  | ExerciseProblem
  | ExerciseMatching
  | undefined;

// Define la funci칩n getStaticPaths
export function getStaticPaths() {
  const paths: Array<{ params: { grade: string; exercise: string } }> = [];

  // Genera rutas din치micas basadas en los datos disponibles
  const grades: string[] = ["7mo", "8vo", "9no", "10mo", "11no", "12mo"];
  grades.forEach((grade) => {
    topics.forEach((topic) => {
      if (topic.title === grade) {
        topic.exercises.forEach((exercise) => {
          paths.push({ params: { grade, exercise: exercise.id } });
        });
      }
    });
  });

  return paths;
}

const { grade, exercise } = Astro.params;

// Busca el ejercicio actual
const currentExercise: Exercise = topics
  .find((topic) => topic.title === grade)
  ?.exercises.find((ex) => ex.id === exercise);

if (!currentExercise) {
  Astro.redirect("/404");
}

let shuffledIncisos: Array<{ text: string; pairId: number }> = [];
if (currentExercise?.type === "Matching") {
  shuffledIncisos = currentExercise?.incisos
    ? (shuffle(currentExercise.incisos) as { text: string; pairId: number }[])
    : [];
}
const length = currentExercise?.incisos?.length ?? 0;
---

<Layout title={`Grado ${grade} | Ejercicio ${exercise}`}>
  <section class="exercises">
    <h2 class="h2-exercises">
      <Pencil class="svg" />
      <span>{grade} Grado | Ejercicio No. {exercise}</span>
    </h2>
    <p set:html={currentExercise?.texto} />

    <!-- Secci칩n de ejercicios -->
    <div class="grid-container">
      {
        currentExercise?.type === "ChooseAnswer" &&
          currentExercise?.incisos
            ?.filter(
              (
                inciso,
              ): inciso is { id: string; exercise: string; answer: Answer[] } =>
                "answer" in inciso,
            )
            .map((inciso) => {
              return (
                <ChooseAnswer
                  inciso={inciso["id"]}
                  exerciseText={inciso["exercise"]}
                  answer={inciso["answer"]}
                />
              );
            })
      }

      {
        currentExercise?.type === "TrueFalse" &&
          currentExercise?.incisos?.map((inciso) => {
            if (!inciso) return null;
            return (
              <TrueFalse
                inciso={"id" in inciso ? inciso.id : ""}
                exerciseText={"exercise" in inciso ? inciso.exercise : ""}
                validation={"validation" in inciso ? inciso.validation : ""}
              />
            );
          })
      }

      {
        currentExercise?.type === "Problem" &&
          currentExercise?.incisos?.map((inciso) => {
            if (!inciso) return null;
            return (
              <Problem
                inciso={"id" in inciso ? inciso.id : ""}
                exerciseText={"exercise" in inciso ? inciso.exercise : ""}
                answer={"answer" in inciso ? inciso.answer : ""}
              />
            );
          })
      }

      {
        currentExercise?.type === "Matching" &&
          shuffledIncisos?.map((inciso) => {
            if (!inciso) return null;
            return "text" in inciso ? (
              <Matching
                text={inciso.text}
                pairId={inciso.pairId}
                length={length}
              />
            ) : null;
          })
      }

      {currentExercise?.type === "" && "Ejercicio por a침adir"}
    </div>
  </section>
</Layout>

<style>
  .exercises {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-block: 4rem;
  }
  .h2-exercises {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 1.5rem;
    color: var(--dark-grey);
  }

  p {
    font-size: 1.1rem;
    color: var(--dark-grey);
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(2, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  @media (max-width: 768px) {
    .grid-container {
      grid-template-columns: 1fr;
    }
  }
</style>
